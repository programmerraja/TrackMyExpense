
import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Calendar, Edit2, Save, X, AlertTriangle, CheckCircle } from "lucide-react";
import { formatCurrency } from "@/lib/formatters";
import { PPFDepositEntry } from "@/types/schemes";
import { PPFRecurringManager } from "./PPFRecurringManager";

interface PPFDepositManagerProps {
  deposits: PPFDepositEntry[];
  annualLimit: number;
  annualLimitUsed: number;
  recurringConfig?: {
    enabled: boolean;
    amount: number;
    start_month: string | null;
  } | null;
  onUpdateDeposit: (month: string, amount: number, date: string) => void;
  onAddDeposit: (month: string, amount: number, date: string) => void;
  onRemoveDeposit: (month: string) => void;
  onEnableRecurring?: (amount: number, startMonth: string) => void;
  onUpdateRecurringAmount?: (newAmount: number, effectiveFromMonth: string) => void;
  onDisableRecurring?: () => void;
  isRecurringLoading?: boolean;
}

export const PPFDepositManager = ({
  deposits,
  annualLimit,
  annualLimitUsed,
  recurringConfig,
  onUpdateDeposit,
  onAddDeposit,
  onRemoveDeposit,
  onEnableRecurring,
  onUpdateRecurringAmount,
  onDisableRecurring,
  isRecurringLoading = false
}: PPFDepositManagerProps) => {
  const [editingMonth, setEditingMonth] = useState<string | null>(null);
  const [editAmount, setEditAmount] = useState<string>("");
  const [editDate, setEditDate] = useState<string>("");

  const currentYear = new Date().getFullYear();
  const currentMonth = new Date().getMonth();
  
  // Generate last 6 months + next 12 months for editing
  const monthsToShow = Array.from({ length: 18 }, (_, i) => {
    const date = new Date();
    date.setMonth(currentMonth - 6 + i);
    return date;
  });

  const getDepositForMonth = (month: string): PPFDepositEntry | undefined => {
    return deposits.find(d => d.month === month);
  };

  const handleEdit = (month: string, deposit?: PPFDepositEntry) => {
    setEditingMonth(month);
    setEditAmount(deposit?.amount.toString() || "");
    setEditDate(deposit?.date || `${month}-05`);
  };

  const handleSave = () => {
    if (!editingMonth || !editAmount) return;

    const amount = parseFloat(editAmount);
    if (isNaN(amount) || amount <= 0) return;

    // Check annual limit
    const existingDeposit = getDepositForMonth(editingMonth);
    const yearDeposits = deposits
      .filter(d => d.date.startsWith(currentYear.toString()))
      .filter(d => d.month !== editingMonth)
      .reduce((sum, d) => sum + d.amount, 0);
    
    if (yearDeposits + amount > annualLimit) {
      alert(`Amount exceeds annual limit of ${formatCurrency(annualLimit)}`);
      return;
    }

    if (existingDeposit) {
      onUpdateDeposit(editingMonth, amount, editDate);
    } else {
      onAddDeposit(editingMonth, amount, editDate);
    }

    setEditingMonth(null);
    setEditAmount("");
    setEditDate("");
  };

  const handleCancel = () => {
    setEditingMonth(null);
    setEditAmount("");
    setEditDate("");
  };

  const isDepositEligibleForInterest = (date: string): boolean => {
    const depositDate = new Date(date);
    return depositDate.getDate() <= 5;
  };

  const isAutoGenerated = (deposit: any): boolean => {
    return deposit.is_auto_generated === true;
  };

  return (
    <div className="space-y-6">
      {/* Recurring Deposits Manager */}
      {onEnableRecurring && onUpdateRecurringAmount && onDisableRecurring && (
        <PPFRecurringManager
          recurringConfig={recurringConfig}
          onEnableRecurring={onEnableRecurring}
          onUpdateRecurringAmount={onUpdateRecurringAmount}
          onDisableRecurring={onDisableRecurring}
          isLoading={isRecurringLoading}
        />
      )}

      {/* Deposit History */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              PPF Deposit History
            </CardTitle>
            <div className="text-sm">
              <span className="text-muted-foreground">Annual Limit: </span>
              <span className={annualLimitUsed > annualLimit * 0.8 ? "text-orange-600" : "text-green-600"}>
                {formatCurrency(annualLimitUsed)} / {formatCurrency(annualLimit)}
              </span>
            </div>
          </div>
          <div className="text-sm text-muted-foreground">
            <p>ðŸ’¡ Deposits made by the 5th of each month earn interest for that month. Interest is credited yearly on March 31st.</p>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {monthsToShow.map(date => {
              const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
              const deposit = getDepositForMonth(monthKey);
              const isEditing = editingMonth === monthKey;

              return (
                <div key={monthKey} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="text-sm font-medium min-w-[100px]">
                      {date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}
                    </div>
                    
                    {isEditing ? (
                      <div className="flex items-center gap-2">
                        <Input
                          type="number"
                          value={editAmount}
                          onChange={(e) => setEditAmount(e.target.value)}
                          placeholder="Amount"
                          className="w-24"
                        />
                        <Input
                          type="date"
                          value={editDate}
                          onChange={(e) => setEditDate(e.target.value)}
                          className="w-36"
                        />
                      </div>
                    ) : (
                      <div className="flex items-center gap-2">
                        {deposit ? (
                          <>
                            <span className="font-semibold">{formatCurrency(deposit.amount)}</span>
                            <span className="text-sm text-muted-foreground">on {deposit.date}</span>
                            {isDepositEligibleForInterest(deposit.date) ? (
                              <Badge variant="secondary" className="text-xs text-green-700 bg-green-100 dark:bg-green-900 dark:text-green-300">
                                <CheckCircle className="h-3 w-3 mr-1" />
                                Interest Eligible
                              </Badge>
                            ) : (
                              <Badge variant="destructive" className="text-xs">
                                <AlertTriangle className="h-3 w-3 mr-1" />
                                No Interest (After 5th)
                              </Badge>
                            )}
                            {isAutoGenerated(deposit) && (
                              <Badge variant="outline" className="text-xs text-blue-600">
                                Auto
                              </Badge>
                            )}
                          </>
                        ) : (
                          <span className="text-muted-foreground">No deposit</span>
                        )}
                      </div>
                    )}
                  </div>

                  <div className="flex items-center gap-1">
                    {isEditing ? (
                      <>
                        <Button size="sm" onClick={handleSave}>
                          <Save className="h-3 w-3" />
                        </Button>
                        <Button size="sm" variant="outline" onClick={handleCancel}>
                          <X className="h-3 w-3" />
                        </Button>
                      </>
                    ) : (
                      <>
                        <Button 
                          size="sm" 
                          variant="outline" 
                          onClick={() => handleEdit(monthKey, deposit)}
                          className="h-8 w-8 p-0"
                        >
                          <Edit2 className="h-3 w-3" />
                        </Button>
                        {deposit && (
                          <Button 
                            size="sm" 
                            variant="destructive" 
                            onClick={() => onRemoveDeposit(monthKey)}
                            className="h-8 w-8 p-0"
                          >
                            <X className="h-3 w-3" />
                          </Button>
                        )}
                      </>
                    )}
                  </div>
                </div>
              );
            })}
          </div>

          {annualLimitUsed > annualLimit * 0.8 && (
            <div className="mt-4 p-3 bg-orange-50 dark:bg-orange-950/20 border border-orange-200 dark:border-orange-800 rounded-lg">
              <div className="flex items-center gap-2 text-orange-800 dark:text-orange-200">
                <AlertTriangle className="h-4 w-4" />
                <span className="text-sm">
                  You've used {((annualLimitUsed / annualLimit) * 100).toFixed(1)}% of your annual limit
                </span>
              </div>
            </div>
          )}

          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg">
            <div className="text-xs text-blue-800 dark:text-blue-200">
              <p><strong>PPF Interest Rules:</strong></p>
              <p>â€¢ Interest is calculated monthly on eligible balance (deposits made by 5th)</p>
              <p>â€¢ Interest is credited once a year on March 31st</p>
              <p>â€¢ 15-year lock-in period from account opening</p>
              <p>â€¢ Maximum annual deposit limit: {formatCurrency(annualLimit)}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
